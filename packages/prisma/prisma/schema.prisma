// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  output          = "../lib"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Error Start
model ServerError {
  id        String   @id
  timestamp DateTime @default(now())
  message   String
  stack     String
  path      String
}

// Error End

// Auth Start
model Email {
  id        String         @id @default(cuid())
  email     String         @unique
  verified  Boolean        @default(false)
  snapshots UserSnapshot[]
}

model User {
  id        String         @id @default(cuid())
  snapshots UserSnapshot[]
  profile   UserProfile?
  posts     Post[]         @relation("PostToAuthor")
  upvoted   Post[]         @relation("PostToUpVoter")
  downvoted Post[]         @relation("PostToDownVoter")
}

// UserSnapshot is immutable, so we can track changes
model UserSnapshot {
  id       String           @id @default(cuid())
  user     User             @relation(fields: [user_id], references: [id])
  user_id  String
  email    Email            @relation(fields: [email_id], references: [id])
  email_id String
  username String
  password String
  revoked  Boolean          @default(false)
  groups   UserGroup[]
  perms    UserPermission[]
  tokens   UserToken[]
}

model UserGroup {
  id        String              @id @default(cuid())
  name      String              @unique
  snapshots UserGroupSnapshot[] @relation("group-history")
  users     UserSnapshot[]
  parents   UserGroupSnapshot[]
}

model UserGroupSnapshot {
  id       String           @id @default(cuid())
  group    UserGroup        @relation("group-history", fields: [group_id], references: [id])
  group_id String
  name     String           @unique
  perms    UserPermission[]
  children UserGroup[]
}

model UserPermission {
  id     String              @id @default(cuid())
  name   String              @unique
  users  UserSnapshot[]
  groups UserGroupSnapshot[]
}

model UserToken {
  id      String       @id @default(cuid())
  user    UserSnapshot @relation(fields: [user_id], references: [id])
  user_id String
  expires DateTime
  traits  String[]
}

// Auth End

// Profile Start

model UserProfile {
  id       String @id @default(cuid())
  user     User   @relation(fields: [user_id], references: [id])
  user_id  String @unique
  name     String
  bio      String
  school   String
  email    String
  location String
  banner   String
  avatar   String
  extra    Json
}

// Profile End

// Course Start
enum CourseType {
  Compulsory
  Elective
  General
  Other
}

// Course End

// Entity Start (School System, School, Department, etc.)
model Entity {
  id        String    @id @default(cuid())
  name      String
  parent    Entity?   @relation("EntityToEntity", fields: [parent_id], references: [id])
  parent_id String?
  children  Entity[]  @relation("EntityToEntity")
  courses   Course[]
  teachers  Teacher[]
}

model Teacher {
  id       String   @id @default(cuid())
  name     String
  entities Entity[]
  courses  Course[]
}

// We say that a course program is a set of courses
model CourseProgram {
  id      String   @id @default(cuid())
  name    String
  courses Course[]
}

model Course {
  id            String          @id @default(cuid())
  year          Int
  term          Int
  name          String
  description   String
  code          String
  type          CourseType
  credit        Int
  extra         Json
  provider      Entity          @relation(fields: [provider_id], references: [id])
  provider_id   String
  programs      CourseProgram[]
  teachers      Teacher[]
  prerequisites Course[]        @relation("PrerequisiteToCourse")
  advanced      Course[]        @relation("PrerequisiteToCourse")
  Post          Post[]
}

// Entity End

// Post Start

enum PostType {
  Announcement
  Article
  Question
  Reply
  Other
}

model PostTag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

model Post {
  id        String    @id @default(cuid())
  type      PostType
  title     String
  content   String
  updated   DateTime? @updatedAt
  author    User      @relation("PostToAuthor", fields: [author_id], references: [id])
  author_id String
  vote_up   User[]    @relation("PostToUpVoter")
  vote_down User[]    @relation("PostToDownVoter")
  tags      PostTag[]
  course    Course?   @relation(fields: [course_id], references: [id])
  course_id String?
  parent    Post?     @relation("PostToPost", fields: [parent_id], references: [id])
  parent_id String?
  children  Post[]    @relation("PostToPost")
}

// Post End
